version: 1
backend:
  phases:
    build:
      commands:
        - echo "Starting backend deployment..."
        - echo "AWS Account ID is $AWS_ACCOUNT_ID"
        - echo "Region is $AWS_DEFAULT_REGION"
        - |
          # Create DynamoDB table if it doesn't exist
          aws dynamodb create-table \
            --table-name Users \
            --attribute-definitions \
              AttributeName=id,AttributeType=S \
              AttributeName=email,AttributeType=S \
            --key-schema AttributeName=id,KeyType=HASH \
            --global-secondary-indexes \
              'IndexName=EmailIndex,KeySchema=[{AttributeName=email,KeyType=HASH}],Projection={ProjectionType=ALL},BillingMode=PAY_PER_REQUEST' \
            --billing-mode PAY_PER_REQUEST \
            --region $AWS_DEFAULT_REGION 2>/dev/null || echo "DynamoDB table already exists"
        - echo "Packaging Lambda function..."
        - cd server
        - npm install --production --silent
        - zip -r ../backend.zip . >/dev/null
        - cd ..
        - echo "Deploying Lambda function..."
        - |
          # Try to create Lambda function, if it fails, update it
          aws lambda create-function \
            --function-name medical-app-amplify \
            --runtime nodejs18.x \
            --role arn:aws:iam::$AWS_ACCOUNT_ID:role/amplifyconsole-backend-role \
            --handler aws-index.handler \
            --zip-file fileb://backend.zip \
            --environment Variables="{JWT_SECRET=medical-secret-2024,NODE_ENV=production}" \
            --timeout 30 \
            --memory-size 256 \
            --region $AWS_DEFAULT_REGION 2>/dev/null || \
          aws lambda update-function-code \
            --function-name medical-app-amplify \
            --zip-file fileb://backend.zip \
            --region $AWS_DEFAULT_REGION
        - echo "Setting up API Gateway..."
        - |
          # Create or get API Gateway
          API_ID=$(aws apigatewayv2 get-apis \
            --query "Items[?Name=='medical-api-amplify'].ApiId" \
            --output text \
            --region $AWS_DEFAULT_REGION)
          
          if [ "$API_ID" = "" ] || [ "$API_ID" = "None" ]; then
            echo "Creating new API Gateway..."
            API_ID=$(aws apigatewayv2 create-api \
              --name medical-api-amplify \
              --protocol-type HTTP \
              --cors-configuration AllowOrigins="*",AllowMethods="*",AllowHeaders="*" \
              --region $AWS_DEFAULT_REGION \
              --query ApiId --output text)
          else
            echo "Using existing API Gateway: $API_ID"
          fi
        - |
          # Create integration
          INTEGRATION_ID=$(aws apigatewayv2 create-integration \
            --api-id $API_ID \
            --integration-type AWS_PROXY \
            --integration-uri arn:aws:lambda:$AWS_DEFAULT_REGION:$AWS_ACCOUNT_ID:function:medical-app-amplify \
            --payload-format-version 2.0 \
            --region $AWS_DEFAULT_REGION \
            --query IntegrationId --output text 2>/dev/null || echo "integration-exists")
        - |
          # Create routes
          aws apigatewayv2 create-route \
            --api-id $API_ID \
            --route-key 'ANY /{proxy+}' \
            --target integrations/$INTEGRATION_ID \
            --region $AWS_DEFAULT_REGION 2>/dev/null || echo "Route exists"
          
          aws apigatewayv2 create-route \
            --api-id $API_ID \
            --route-key '$default' \
            --target integrations/$INTEGRATION_ID \
            --region $AWS_DEFAULT_REGION 2>/dev/null || echo "Default route exists"
        - |
          # Create stage
          aws apigatewayv2 create-stage \
            --api-id $API_ID \
            --stage-name prod \
            --auto-deploy \
            --region $AWS_DEFAULT_REGION 2>/dev/null || echo "Stage exists"
        - |
          # Add Lambda permission
          aws lambda add-permission \
            --function-name medical-app-amplify \
            --statement-id api-gateway-amplify \
            --action lambda:InvokeFunction \
            --principal apigateway.amazonaws.com \
            --source-arn "arn:aws:execute-api:$AWS_DEFAULT_REGION:$AWS_ACCOUNT_ID:$API_ID/*/*" \
            --region $AWS_DEFAULT_REGION 2>/dev/null || echo "Permission exists"
        - echo "Backend API URL is https://$API_ID.execute-api.$AWS_DEFAULT_REGION.amazonaws.com/prod"
        - echo "REACT_APP_API_URL=https://$API_ID.execute-api.$AWS_DEFAULT_REGION.amazonaws.com/prod" > client/.env.production
        - echo "âœ… Backend deployment complete!"
frontend:
  phases:
    preBuild:
      commands:
        - cd client
        - npm ci
    build:
      commands:
        - npm run build
  artifacts:
    baseDirectory: client/build
    files:
      - '**/*'
  cache:
    paths:
      - client/node_modules/**/*